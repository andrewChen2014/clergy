// Go入门指南
	274/312
	// (ok) 第1章：Go 语言的起源，发展与普及
		
	// (ok) 第2章：安装与运行环境
		原生编译器gc
		非原生编译器gccgo
		g 编译器
		l 链接器
		$GOROOT go在电脑上的安装位置
		$GOARCH 目标处理器架构
		$GOOS 目标操作系统
		$GOBIN 编译器和链接器的位置 默认 $GOROOT/BIN
		交叉编译 : 可以在一台机器上构建运行在具有不同操作系统和处理器架构上运行的程序。
			$GOHOSTOS
			$GOHOSTARCH
		$GOPATH 默认和 $GOROOT一样。
			src 源码文件
			pkg 包文件
			bin 可执行文件
		$GOARM 专门针对基于ARM的处理器
		$GOMAXPROCS 应用程序可使用的处理器个数与核数
		// linux上安装go

		// 在windows上安装go
			
		// 安装目录结构
			bin
			doc
			lib
			misc
			os_arch
			src
			src/cmd
	// (ok) 第3章：编辑器、集成开发环境与其它工具
		// 调试期
			gdb
		// 构建
			go build 编译并安装自身包和依赖包
			go intall 安装自身包和依赖包
		// 格式化代码
			gofmt -w xxx.go
		// 自动生成代码文档
			go doc xxx
		// 与其他语言进行交互
			// 与c交互
			
			// 与c++交互
				
	// 第4章：基本结构和基本数据类型
		
		// 包的概念 导入与可见性
			包是结构化代码的一种方式:么个程序都由包(pkg)的概念组成，可以使用自身的包或者从其他包中导入内容
			申明文件属于某个包 
				源文件头部
				package xxx
			go中包模型采用了显式依赖关系的机制来达到快速编译的目的
			导入包
				import "xxx"
				import "xxx";import "xxxx"
				import ("xxx";"xxx")
				import (
					"xxx"
					"xxx"
				)
			可见性规则
				大写字母开头，相当于public，可以被外不包使用
				小写字母开头，相当于privatre，不可以被外部包使用
			导入包时，可以取别名
				import fm "fmt"		// fmt的别名fm
		
		// 函数
			// 格式
				func func_name(param_list) (return_val_list) {
					func_body;
				}
			// 注释
				//
				/**/
			// 类型
				struct array slice map channel interface
			// 类型转换
				不支持隐式类型转换，所有转换必须显式说明
				a := 5.0
				b := a			// 错误
				b := int(a)		// 正确
		// 变量
			// 变量定义
				var var_name var_type
				// ex:
				var a , b int
				var {
					a int
					b int
				}
			// 值类型
				int float bool string
			// 引用类型
				指针 slice maps channel
			
