    // (ok) TDEngine游戏平台框架逻辑
	http://www.jianshu.com/p/418b0f741333
    // (ok) TDEngine 压力测试思路
	http://www.jianshu.com/p/401a80e5cf22?utm_campaign=maleskine&utm_content=note&utm_medium=pc_all_hots&utm_source=recommendation
    // TDEngine数据包的详细说明
        http://www.jianshu.com/p/005964f3e167?utm_campaign=maleskine&utm_content=note&utm_medium=pc_all_hots&utm_source=recommendation
      
      
      
      
    // (ok) 类似于QQ游戏百万人同时在线的服务器架构实现
	http://blog.csdn.net/sodme/article/details/213995
	// 这个比较原始了，不过写的也比较早，04年的文章
    // 负载均衡－－大型在线系统实现的关键(上篇)（再谈QQ游戏百万人在线的技术实现）
	http://blog.csdn.net/sodme/article/details/393165
      
    // (ok) 大服游戏架构
      https://zhuanlan.zhihu.com/p/25958589
      // 主要是做好stateless和单点，其实结构上都是大同小异
      
    // 游戏服务器的常用架构
      https://blog.xiaomo.info/2017/GameServerType/
      
    // 架构的分析模型
    	http://gcloud.qq.com/forum/topic/56a0bac3a90d8b775e8f3c1b
	
    // (ok) 经典游戏服务器端架构概述 （1）
    	https://www.qcloud.com/community/article/253
    // (ok) 经典游戏服务器端架构概述 (2)
    	https://www.qcloud.com/community/article/164816001481011966
	全服分线模型
	分区分服
	开房间型游戏模型
	全服全线模型
		// 基于中心点的动态组织
			一般来说我们会使用一组目录服务器来充当“中心点”，代表整个集群。开源产品中最好的产品就是ZooKeeper了。
	
    // (ok) 格斗类帧同步游戏的优化
    	https://www.qcloud.com/community/article/520940
	// 我们一般认为，LockStep游戏由于网络延迟，画面的反应会比直接本地渲染要慢很多，所以我们希望画面能对玩家的输入有即刻的反应。但也希望对其他用户的交互是一致的。
	// 所以有一些游戏采用所谓“预渲染”策略
		一、逻辑与渲染分别驱动
			所谓渲染模块，就是用来给本地客户端表现的画面，使用本地渲染驱动，也就是Unity的Update()事件
			所谓逻辑模块，就用来运行所有的攻击判定（角色位置、攻击与受击区域）的变化，使用服务器发来的网络包进行驱动，也就是通过同步服务器得到包后再运行。
		二、纠正渲染误差
			尽量弥补2者间的误差
			
    // (ok) 棋牌游戏服务器架构设计
    	https://www.cnblogs.com/wgslucky/p/6426544.html
	// 介绍的思路以前都了解过，主要是怎么适合的用进自己的代码中
	
    // 
			
